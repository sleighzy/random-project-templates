version: '3.5'

networks:
  opentelemetry:

volumes:
  es_data:

x-logging: &default-logging
  options:
    max-size: '5m'

services:
  restful-app:
    image: java-restful-service:1.0-SNAPSHOT
    logging: *default-logging
    networks:
      - opentelemetry
    ports:
      - 8080:8080
    environment:
      OTEL_JAVAAGENT_ENABLED: 'true'
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: none
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:55680
      OTEL_RESOURCE_ATTRIBUTES: service.name=restful-app
      # Enabling instrumentation for the Grizzly HTTP server will provide
      # detailed trace information for all requests handled by the server.
      # This will additionally ensure that spans created for requests handled
      # by the server will be joined in the trace. For example, calls from the
      # Orders service to the Inventory service.
      OTEL_INSTRUMENTATION_GRIZZLY_ENABLED: 'true'

  # OpenTelemetry Collector
  # https://github.com/open-telemetry/opentelemetry-collector
  otel-collector:
    # The official stable release is otel/opentelemetry-collector
    # The development releases are otel/opentelemetry-collector-dev
    # See .env file for changing image versions.
    image: ${OTELCOL_IMG}
    logging: *default-logging
    restart: unless-stopped
    command: ['--config=/etc/config.yaml', '${OTELCOL_ARGS}']
    networks:
      - opentelemetry
    volumes:
      - ./otel-config.yaml:/etc/config.yaml
    ports:
      - '1888:1888' # pprof extension
      - '8888:8888' # Prometheus metrics exposed by the collector
      - '8889:8889' # Prometheus exporter metrics
      - '13133:13133' # health_check extension
      - '55679:55679' # zpages extension
      - '55680:55680' # OTLP receiver endpoint
      - '14250:14250' # Jaeger receiver (gRPC)
      - '14268:14268' # Jaeger receiver (thrift http)
      - '6832:6832/udp' # Jaeger receiver (binary thrift) (nodejs client doesn't support compact)
    profiles:
      - opentelemetry

  jaeger-collector:
    image: jaegertracing/jaeger-collector:latest
    logging: *default-logging
    restart: unless-stopped
    depends_on:
      - elasticsearch
    networks:
      - opentelemetry
    profiles:
      - opentelemetry
    environment:
      SPAN_STORAGE_TYPE: elasticsearch
      ES_SERVER_URLS: http://elasticsearch:9200
      LOG_LEVEL: info

  jaeger-query:
    image: jaegertracing/jaeger-query:latest
    logging: *default-logging
    restart: unless-stopped
    networks:
      - opentelemetry
    ports:
      # Jaeger query dashboard
      - '16686:16686'
    profiles:
      - opentelemetry
    environment:
      SPAN_STORAGE_TYPE: elasticsearch
      ES_SERVER_URLS: http://elasticsearch:9200
      # Look back 3 months to locate spans on first load to
      # find available services
      ES_MAX_SPAN_AGE: 2160h0m0s

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.5.1
    logging: *default-logging
    restart: unless-stopped
    networks:
      - opentelemetry
    ports:
      - '9200:9200'
      - '9300:9300'
    profiles:
      - opentelemetry
    environment:
      cluster.name: opentelemetry
      discovery.type: single-node
      bootstrap.memory_lock: 'true'
      ES_JAVA_OPTS: -Xms512m -Xmx2048m
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es_data:/usr/share/elasticsearch/data
